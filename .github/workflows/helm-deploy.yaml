name: 'Helm Deploy to EKS'

on:
  workflow_call:
    inputs:
      app:
        description: "Name of the app"
        required: true
        type: string
      namespace:
        required: true
        type: string
    secrets:
      AWS_ASSUME_ROLE:
        required: true
      AWS_REGION:
        required: true

jobs:

  ecr-push:
    name: ECR 
    runs-on: ubuntu-latest

    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup aws cli
      run: |
        sudo apt-get update
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        echo "aws-cli version: $(aws --version)"

    - name: Setup kubectl
      run: |
        sudo apt-get update
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
        echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
        chmod +x kubectl
        mkdir -p ~/.local/bin
        mv ./kubectl ~/.local/bin/kubectl
        echo "kubectl version: $(kubectl version --client)"

    - name: Install Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > get_helm.sh
        chmod 700 get_helm.sh
        ./get_helm.sh

    - name: Configure aws credentials
      run: |
        export TEMP_CREDS=$(aws sts assume-role --role-arn ${{ secrets.ROLE_TO_ASSUME }} --role-session-name "GitHubActionsSession")
        export AWS_ACCESS_KEY_ID=$(echo $TEMP_CREDS | jq -r '.Credentials.AccessKeyId')
        export AWS_SECRET_ACCESS_KEY=$(echo $TEMP_CREDS | jq -r '.Credentials.SecretAccessKey')
        export AWS_SESSION_TOKEN=$(echo $TEMP_CREDS | jq -r '.Credentials.SessionToken')

    - name: Configure kubeconfig
      run: |
        aws eks update-kubeconfig --name eks-${{ inputs.environment }}-cluster --region ${{ secrets.AWS_REGION }}
        echo "List all namespaces..."
        kubectl get ns

    - name: Check Helm Chart
      run: |
        helm upgrade --install ${{ inputs.app }} ./helm-apps/${{ inputs.app }} -n ${{ inputs.namespace }} --create-namespace --dry-run
      continue-on-error: false

    - name: Deploy Helm Chart
      run: |
        helm upgrade --install ${{ inputs.app }} ./helm-apps/${{ inputs.app }} -n ${{ inputs.namespace }} --create-namespace
    
    - name: Validation
      run: |
        echo "Validating ${{ inputs.app }} deployment..."
        kubectl get all -n ${{ inputs.namespace }}