name: Terraform Destroy

on:
  workflow_call:
    inputs:
      working_directory:
        description: "Path of the working directory"
        required: true
        type: string
      tf_version:
        description: "Version of terraform to install"
        required: true
        type: string
      cloud_provider:
        description: "Cloud provider to use (aws or digitalocean)"
        required: true
        type: string
    secrets:
      # AWS
      AWS_ASSUME_ROLE:
        required: false
      AWS_REGION:
        required: false
      AWS_BUCKET_NAME:
        required: false
      AWS_BUCKET_KEY:
        required: false
      S3_LOCK:
        required: false

      # DigitalOcean
      DO_API_TOKEN:
        required: false
      SPACES_BUCKET_NAME:
        required: false
      SPACES_BUCKET_KEY:
        required: false
      SPACES_ACCESS_KEY:
        required: false
      SPACES_SECRET_KEY:
        required: false
      NEWRELIC_ACCOUNT:
        required: false
      NEWRELIC_API:
        required: false
      NEWRELIC_REGION:
        required: false

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up tfenv
      run: |
        git clone --depth=1 https://github.com/tfutils/tfenv.git ~/.tfenv
        ln -s ~/.tfenv/bin/* /usr/local/bin
        mkdir -p ~/.local/bin/
        . ~/.profile
        ln -s ~/.tfenv/bin/* ~/.local/bin
        echo "tvenf location $(which tfenv)"
        echo "tfenv version $(tfenv --version)"

    - name: Set up terraform
      run: |
        tfenv install ${{ inputs.tf_version }}
        tfenv use ${{ inputs.tf_version }}
        echo "Terraform version $(terraform version)"

    - name: Configure AWS credentials
      if: inputs.cloud_provider == 'aws'
      id: configure_aws_credentials
      env:
        aws-region: ${{ secrets.AWS_REGION }}
        aws-assume-role: ${{ secrets.AWS_ASSUME_ROLE }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.aws-assume-role }}
        aws-region: ${{ env.aws-region }}

    - name: Terraform Init (AWS)
      if: ${{ inputs.cloud_provider == 'aws' && github.ref == 'refs/heads/main' }}
      env:
        aws-region: ${{ secrets.AWS_REGION }}
        aws_bucket_name: ${{ secrets.AWS_BUCKET_NAME }}
        aws_bucket_key: ${{ secrets.AWS_BUCKET_KEY }}
        s3_locking: ${{ secrets.S3_LOCK }}
      run: |
        terraform init -backend=true \
          -backend-config="bucket=${aws_bucket_name}" \
          -backend-config="key=${aws_bucket_key}" \
          -backend-config="use_lockfile=${s3_locking}" \
          -backend-config="encrypt=true"
      continue-on-error: false

    - name: Terraform Init (DigitalOcean)
      if: ${{ inputs.cloud_provider == 'digitalocean' && github.ref == 'refs/heads/main' }}
      env:
        aws-region: ${{ secrets.AWS_REGION }}
        spaces_bucket_name: ${{ secrets.SPACES_BUCKET_NAME }}
        spaces_bucket_key: ${{ secrets.SPACES_BUCKET_KEY }}
        access_key: ${{ secrets.SPACES_ACCESS_KEY }}
        secret_key: ${{ secrets.SPACES_SECRET_KEY }}
        TF_VAR_do_token: ${{ secrets.DO_API_TOKEN }}
        TF_VAR_newrelic_account: ${{ secrets.NEWRELIC_ACCOUNT }}
        TF_VAR_newrelic_api: ${{ secrets.NEWRELIC_API }}
        TF_VAR_newrelic_region: ${{ secrets.NEWRELIC_REGION }}
      run: |
        terraform init -backend=true \
          -backend-config="endpoints={s3="https://nyc3.digitaloceanspaces.com"}" \
          -backend-config="bucket=${spaces_bucket_name}" \
          -backend-config="key=${spaces_bucket_key}" \
          -backend-config="aws-region=${aws-region}" \
          -backend-config="access_key=${access_key}" \
          -backend-config="secret_key=${secret_key}" \
          -backend-config="skip_credentials_validation=true" \
          -backend-config="skip_requesting_account_id=true" \
          -backend-config="skip_metadata_api_check=true" \
          -backend-config="skip_region_validation=true" \
          -backend-config="skip_s3_checksum=true" \
          -backend-config="use_lockfile=true" \
          -backend-config="encrypt=true"

    - name: Terraform Destroy
      if: github.ref == 'refs/heads/main'
      env:
        TF_VAR_do_token: ${{ secrets.DO_API_TOKEN }}
        TF_VAR_newrelic_account: ${{ secrets.NEWRELIC_ACCOUNT }}
        TF_VAR_newrelic_api: ${{ secrets.NEWRELIC_API }}
        TF_VAR_newrelic_region: ${{ secrets.NEWRELIC_REGION }}
      run: terraform destroy -auto-approve
      continue-on-error: false
